<?xml version="1.0" encoding="UTF-8"?>
<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"
>

  <modelVersion>4.0.0</modelVersion>
  <prerequisites>
    <maven>3.0.0</maven>
  </prerequisites>

  <parent>
    <groupId>nl.xup.openwhisk.api</groupId>
    <artifactId>openwhisk-api</artifactId>
    <version>0.0.1</version>
  </parent>

  <artifactId>openwhisk-api-spec</artifactId>
  <packaging>jar</packaging>

  <name>Openwhisk :: Java API :: Specification</name>

  <properties>
    <swagger.input>${project.basedir}/src/main/swagger/apiv1swagger.json</swagger.input>

    <swagger2markup.version>1.2.0</swagger2markup.version>
    <asciidoctor.version>1.5.3</asciidoctor.version>

    <generated.asciidoc.directory>${project.build.directory}/asciidoc/generated</generated.asciidoc.directory>
    <asciidoctor.input.directory>${project.basedir}/src/docs/asciidoc</asciidoctor.input.directory>
    <asciidoctor.html.output.directory>${project.build.directory}/asciidoc/html</asciidoctor.html.output.directory>
    <asciidoctor.pdf.output.directory>${project.build.directory}/asciidoc/pdf</asciidoctor.pdf.output.directory>
  </properties>

  <build>
    <resources>
      <resource>
        <directory>${project.build.directory}/generated-swagger-resources</directory>
        <includes>
          <include>swagger.json</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.6</version>
      </plugin>
      <plugin>
        <groupId>io.swagger</groupId>
        <artifactId>swagger-codegen-maven-plugin</artifactId>
        <version>2.2.3</version>
        <executions>
          <execution>
            <id>generate-swagger-json</id>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${swagger.input}</inputSpec>
              <language>swagger</language>
              <output>${project.build.directory}/generated-swagger-resources</output>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- First, use the swagger2markup plugin to generate asciidoc -->
      <plugin>
        <groupId>io.github.swagger2markup</groupId>
        <artifactId>swagger2markup-maven-plugin</artifactId>
        <version>${swagger2markup.version}</version>
        <dependencies>
          <dependency>
            <groupId>io.github.swagger2markup</groupId>
            <artifactId>swagger2markup-import-files-ext</artifactId>
            <version>${swagger2markup.version}</version>
          </dependency>
        </dependencies>
        <configuration>
          <swaggerInput>${swagger.input}</swaggerInput>
          <outputDir>${generated.asciidoc.directory}</outputDir>
          <config>
            <swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>
            <!--swagger2markup.pathsGroupedBy>TAGS</swagger2markup.pathsGroupedBy -->

            <swagger2markup.extensions.dynamicOverview.contentPath>${project.basedir}/src/docs/asciidoc/extensions/overview</swagger2markup.extensions.dynamicOverview.contentPath>
            <swagger2markup.extensions.dynamicDefinitions.contentPath>${project.basedir}/src/docs/asciidoc/extensions/definitions</swagger2markup.extensions.dynamicDefinitions.contentPath>
            <swagger2markup.extensions.dynamicPaths.contentPath>${project.basedir}/src/docs/asciidoc/extensions/paths</swagger2markup.extensions.dynamicPaths.contentPath>
            <swagger2markup.extensions.dynamicSecurity.contentPath>${project.basedir}src/docs/asciidoc/extensions/security/</swagger2markup.extensions.dynamicSecurity.contentPath>
          </config>
        </configuration>
        <executions>
          <execution>
            <phase>test</phase>
            <goals>
              <goal>convertSwagger2markup</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Run the generated asciidoc through Asciidoctor to generate other documentation types, such 
        as PDFs or HTML5 -->
      <plugin>
        <groupId>org.asciidoctor</groupId>
        <artifactId>asciidoctor-maven-plugin</artifactId>
        <version>${asciidoctor.version}</version>
        <!-- Include Asciidoctor PDF for pdf generation -->
        <dependencies>
          <dependency>
            <groupId>org.asciidoctor</groupId>
            <artifactId>asciidoctorj-pdf</artifactId>
            <version>1.5.0-alpha.10.1</version>
          </dependency>
        </dependencies>
        <!-- Configure generic document generation settings -->
        <configuration>
          <sourceDirectory>${asciidoctor.input.directory}</sourceDirectory>
          <sourceDocumentName>index.adoc</sourceDocumentName>
          <attributes>
            <doctype>book</doctype>
            <toc>left</toc>
            <toclevels>3</toclevels>
            <numbered></numbered>
            <hardbreaks></hardbreaks>
            <sectlinks></sectlinks>
            <sectanchors></sectanchors>
            <generated>${generated.asciidoc.directory}</generated>
          </attributes>
        </configuration>
        <!-- Since each execution can only handle one backend, run separate executions for each desired 
          output type -->
        <executions>
          <execution>
            <id>output-html</id>
            <phase>test</phase>
            <goals>
              <goal>process-asciidoc</goal>
            </goals>
            <configuration>
              <backend>html5</backend>
              <outputDirectory>${asciidoctor.html.output.directory}</outputDirectory>
            </configuration>
          </execution>

          <execution>
            <id>output-pdf</id>
            <phase>test</phase>
            <goals>
              <goal>process-asciidoc</goal>
            </goals>
            <configuration>
              <backend>pdf</backend>
              <outputDirectory>${asciidoctor.pdf.output.directory}</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
